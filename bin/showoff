#! /usr/bin/env ruby

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require 'showoff'
require 'rubygems'
require 'gli'

include GLI

desc 'Create new showoff presentation'
arg_name 'dir_name'
long_desc 'This command helps start a new showoff presentation by setting up the proper directory structure for you.  it takes the directory name you would like showoff to create for you.'
command [:create,:init] do |c|

  c.desc 'Don''t create sample slides'
  c.switch [:n,:nosamples]

  c.desc 'sample slide directory name'
  c.default_value 'one'
  c.flag [:d,:slidedir]

  c.action do |global_options,options,args|
    raise "dir_name is required" if args.empty?
    ShowOffUtils.create(args[0],!options[:n],options[:d])
  end
end

desc 'Setup your presentation to serve on Heroku'
arg_name 'heroku_name'
long_desc 'Creates the .gems file and config.ru file needed to push a showoff pres to heroku.  it will then run ''heroku create'' for you to register the new project on heroku and add the remote for you.  then all you need to do is commit the new created files and run ''git push heroku'' to deploy.'
command :heroku do |c|
  c.action do |global_options,options,args|
    raise "heroku_name is required" if args.empty?
    ShowOffUtils.heroku(args[0])
  end
end

desc 'Serves the showoff presentation in the current directory'
command :serve do |c|

  c.desc 'Port on which to run'
  c.default_value "9090"
  c.flag [:p,:port]

  c.action do |global_options,options,args|
    ShowOff.run! :host => 'localhost', :port => options[:p].to_i
  end
end

desc 'Add a new slide at the end in a given dir'
arg_name 'slide_dir slide_name [title]'
long_desc 'When in a showoff directory, creates a new slide in slide_dir that is numbered to come after the current last slide and will contain ''slide_name'' in its name.  If you have two slides already: one/01_intro.md and one/02_about.md, `showoff add one foo` will create the slide one/03_foo.md.  Further, you can include source code by giving the -s option and the path to the file; showoff will do its best to guess the language.'
command [:add,:new] do |c|
  c.desc 'Don''t number the slide, use the given name verbatime'
  c.switch [:n,:nonumber]

  c.desc 'Include code from the given file as the slide body'
  c.arg_name 'path to file'
  c.flag [:s,:source]

  c.action do |global_options,options,args|
    slide_dir = args.shift
    slide_name = args.shift
    title = args.join(" ")
    ShowOffUtils.add_slide(:dir => slide_dir,:name => slide_name,:title => title, :number => !options[:n], :code => options[:s])
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  true
end

post do |global,command,options,args|
  # Post logic here
end

on_error do |exception|
  raise exception
  # Error logic here
  # return false to skip default error handling
  true
end

GLI.run(ARGV)

